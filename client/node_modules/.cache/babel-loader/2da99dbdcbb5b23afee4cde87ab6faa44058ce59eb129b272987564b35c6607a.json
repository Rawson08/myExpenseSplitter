{"ast":null,"code":"var _jsxFileName = \"/home/roshan/Personal Projects/my-expense-manager/src/ReceiptUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReceiptUpload() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [crop, setCrop] = useState({\n    aspect: 16 / 9\n  });\n  const [previewSrc, setPreviewSrc] = useState('');\n  const [croppedImage, setCroppedImage] = useState(null);\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setPreviewSrc(URL.createObjectURL(file));\n    }\n  };\n  const onImageLoaded = image => {\n    // You can perform actions on the image for cropping here\n  };\n  const onCropComplete = crop => {\n    // This function can be used to create a cropped version of the image\n  };\n  const onCropChange = (crop, percentCrop) => {\n    // You may need to update the crop state\n    setCrop(crop);\n  };\n  const handleSubmit = async () => {\n    if (!selectedFile) return;\n    const formData = new FormData();\n    // Append the cropped image, not the original one\n    formData.append('receipt', croppedImage);\n    try {\n      const response = await fetch('http://localhost:3001/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('OCR Result:', data.text);\n      } else {\n        console.error('Error in file upload');\n      }\n    } catch (error) {\n      console.error('Error uploading the file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), previewSrc && /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: previewSrc,\n      crop: crop,\n      onImageLoaded: onImageLoaded,\n      onComplete: onCropComplete,\n      onChange: onCropChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Upload Receipt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(ReceiptUpload, \"CajmbOGLiqPZ1de9CkszhDkeZFM=\");\n_c = ReceiptUpload;\nexport default ReceiptUpload;\nvar _c;\n$RefreshReg$(_c, \"ReceiptUpload\");","map":{"version":3,"names":["React","useState","ReactCrop","jsxDEV","_jsxDEV","ReceiptUpload","_s","selectedFile","setSelectedFile","crop","setCrop","aspect","previewSrc","setPreviewSrc","croppedImage","setCroppedImage","handleFileChange","event","file","target","files","URL","createObjectURL","onImageLoaded","image","onCropComplete","onCropChange","percentCrop","handleSubmit","formData","FormData","append","response","fetch","method","body","ok","data","json","console","log","text","error","children","type","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","src","onComplete","onClick","_c","$RefreshReg$"],"sources":["/home/roshan/Personal Projects/my-expense-manager/src/ReceiptUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\n\nfunction ReceiptUpload() {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [crop, setCrop] = useState({ aspect: 16 / 9 });\n    const [previewSrc, setPreviewSrc] = useState('');\n    const [croppedImage, setCroppedImage] = useState(null);\n\n    const handleFileChange = event => {\n        const file = event.target.files[0];\n        if (file) {\n            setSelectedFile(file);\n            setPreviewSrc(URL.createObjectURL(file));\n        }\n    };\n\n    const onImageLoaded = image => {\n        // You can perform actions on the image for cropping here\n    };\n\n    const onCropComplete = crop => {\n        // This function can be used to create a cropped version of the image\n    };\n\n    const onCropChange = (crop, percentCrop) => {\n        // You may need to update the crop state\n        setCrop(crop);\n    };\n\n    const handleSubmit = async () => {\n        if (!selectedFile) return;\n\n        const formData = new FormData();\n        // Append the cropped image, not the original one\n        formData.append('receipt', croppedImage);\n\n        try {\n            const response = await fetch('http://localhost:3001/api/upload', {\n                method: 'POST',\n                body: formData\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                console.log('OCR Result:', data.text);\n            } else {\n                console.error('Error in file upload');\n            }\n        } catch (error) {\n            console.error('Error uploading the file:', error);\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\n            {previewSrc && (\n                <ReactCrop\n                    src={previewSrc}\n                    crop={crop}\n                    onImageLoaded={onImageLoaded}\n                    onComplete={onCropComplete}\n                    onChange={onCropChange}\n                />\n            )}\n            <button onClick={handleSubmit}>Upload Receipt</button>\n        </div>\n    );\n}\n\nexport default ReceiptUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}